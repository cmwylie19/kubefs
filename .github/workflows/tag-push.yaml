name: Build/Push Action

on:
  push:
    tags: ["*"]
  # workflow_run:
  #   workflows: ["Run Tests"]
  #   branches: [main]
  #   types: 
  #     - completed

jobs:
  build-and-test:
    name: build-and-test
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Build
      run: |- 
        cd server;
        GOARCH=arm64 GOOS=linux go build -o kubefs ./cmd/kubefs
    - name: Test
      run: |-
        cd server;
        ENV=CI go test -v ./...;
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      
    - name: Unit Test Frontend
      run: |-
        cd frontend;
        yarn -s;
        yarn run test-ci;
        echo "Exited with '$?'";

  build-images-and-patch:
    needs: build-and-test
    name: build-images-and-patch
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
          
      - name: Build and push server
        uses: docker/build-push-action@v2
        with:
          context: ./server/build
          push: true
          tags: cmwylie19/kubefs:${{ env.RELEASE_VERSION }}


      - name: Build and push frontend
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: cmwylie19/kubefs-web:${{ env.RELEASE_VERSION }}

      - name: update server source
        run: | 
          IMAGE=$(cat server/env/overlays/stage/version.yml | egrep image: | sed 's/image: //g' | awk '{$1=$1};1')
          NEW_IMAGE=$(echo ${IMAGE%:*}:${RELEASE_VERSION})

          # Insert backslash
          NEW_IMAGE=$(echo "$NEW_IMAGE" | sed  's#/#\\/#g')
          IMAGE=$(echo "$IMAGE" | sed  's#/#\\/#g')



          sed "s/$IMAGE/$NEW_IMAGE/g" server/env/overlays/stage/version.yml > server/env/overlays/stage/version1.yml
          mv server/env/overlays/stage/version1.yml server/env/overlays/stage/version.yml

      - name: update frontend source
        run: | 
          IMAGE=$(cat frontend/env/overlays/stage/version.yml | egrep image: | sed 's/image: //g' | awk '{$1=$1};1')
          NEW_IMAGE=$(echo ${IMAGE%:*}:${RELEASE_VERSION})

          # Insert backslash
          NEW_IMAGE=$(echo "$NEW_IMAGE" | sed  's#/#\\/#g')
          IMAGE=$(echo "$IMAGE" | sed  's#/#\\/#g')



          sed "s/$IMAGE/$NEW_IMAGE/g" frontend/env/overlays/stage/version.yml > frontend/env/overlays/stage/version1.yml
          mv frontend/env/overlays/stage/version1.yml frontend/env/overlays/stage/version.yml

      - run: echo "🍏 This job's status is ${{ job.status }}."



      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV


      # - name: Set up Node.js
      #   uses: actions/setup-node@v3

      # - name: Install dependencies
      #   run: npm install

      # - name: Update source code
      #   run: eslint "src/**" --fix

      - name: Update frontend version
        run: |
          git config --local user.email cmwylie19@gmail.com
          git config --local user.name "Casey Wylie"
          git add frontend/env/overlays/stage/version.yml
          git commit -a -m "[TASK] Bumping frontend image version"
          git push --force


      - name: Update server version
        run: |- 
          git config user.name "Casey Wylie"
          git config user.email cmwylie19@gmail.com
          git checkout -b temp1
          git add server/env/overlays/stage/version.yml
          git commit -m '[TASK] Bumping server image version'
          git checkout main
          git merge temp1
          git push origin main
          git tag ${{ env.RELEASE_VERSION }} --force
          git push origin main --tags --force