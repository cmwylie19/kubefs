name: On Tag

on:
  push:
    tags: ["*"]


jobs:
  unit-test:
    name: unit-test
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Unit Test Server
      run: |-
        cd server;
        ENV=CI go test -v ./...;
        
    - name: Set up Node.js
      if: success()
      uses: actions/setup-node@v3
      
    - name: Unit Test Frontend
      run: |-
        cd frontend;
        yarn -s;
        yarn run test-ci;
        echo "Exited with '$?'";

  build-stage-frontend:
    needs: unit-test
    name: build-stage-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Env for RELEASE_VERSION
        if: success()
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Test RELEASE_VERSION
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Set URL to Stage for Frontend in Code
        run: |
          cp -a frontend/src/stage_url.js frontend/src/url.js

      - name: Build New Frontend Image with Tag (Stage-URL)
        # uses: docker/build-push-action@v2
        if: success()
        run: |
          cd frontend;
          docker build --platform linux/arm64 -t cmwylie19/kubefs-web:${{ env.RELEASE_VERSION }}-stage .;
          docker push cmwylie19/kubefs-web:${{ env.RELEASE_VERSION }}-stage

  build-prod-frontend:
    needs: unit-test
    name: build-prod-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Env for RELEASE_VERSION
        if: success()
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Test RELEASE_VERSION
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Set URL to Prod for Frontend in Code
        run: |
          cp -a frontend/src/prod_url.js frontend/src/url.js

      - name: Build New Frontend Image with Tag (Prod-URL)
        if: success()
        run: |
          cd frontend;
          docker build --platform linux/arm64 -t cmwylie19/kubefs-web:${{ env.RELEASE_VERSION }} .;
          docker push cmwylie19/kubefs-web:${{ env.RELEASE_VERSION }}
          
  build-server:
    needs: unit-test
    name: build-server
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Env for RELEASE_VERSION
        if: success()
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Test RELEASE_VERSION
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Build New Server Image with Tag
        if: success()
        run: |
          cd server;

          docker build -t cmwylie19/kubefs:${{ env.RELEASE_VERSION }} build/;
          docker push cmwylie19/kubefs:${{ env.RELEASE_VERSION }}

  patch-push:
    needs: [unit-test, build-stage-frontend, build-prod-frontend, build-server]
    name: patch-push
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Update Server Image Tag in Stagegit
        run: | 
          IMAGE=$(cat server/env/overlays/stage/version.yaml | egrep image: | sed 's/image: //g' | awk '{$1=$1};1')
          NEW_IMAGE=$(echo ${IMAGE%:*}:${RELEASE_VERSION})

          # Insert backslash
          NEW_IMAGE=$(echo "$NEW_IMAGE" | sed  's#/#\\/#g')
          IMAGE=$(echo "$IMAGE" | sed  's#/#\\/#g')



          sed "s/$IMAGE/$NEW_IMAGE/g" server/env/overlays/stage/version.yaml > server/env/overlays/stage/version1.yaml
          mv server/env/overlays/stage/version1.yaml server/env/overlays/stage/version.yaml

      - name: Update Frontend Image Tag in Stage
        run: | 
          IMAGE=$(cat frontend/env/overlays/stage/version.yaml | egrep image: | sed 's/image: //g' | awk '{$1=$1};1')
          NEW_IMAGE=$(echo ${IMAGE%:*}:${RELEASE_VERSION}-stage)

          # Insert backslash
          NEW_IMAGE=$(echo "$NEW_IMAGE" | sed  's#/#\\/#g')
          IMAGE=$(echo "$IMAGE" | sed  's#/#\\/#g')



          sed "s/$IMAGE/$NEW_IMAGE/g" frontend/env/overlays/stage/version.yaml > frontend/env/overlays/stage/version1.yaml
          mv frontend/env/overlays/stage/version1.yaml frontend/env/overlays/stage/version.yaml

      - run: echo "üçè This job's status is ${{ job.status }}."


      - name: Update frontend version in Git
        run: |
          git config --local user.email cmwylie19@gmail.com
          git config --local user.name "Casey Wylie"
          git add frontend/env/overlays/stage/version.yaml
          git commit --allow-empty -m "[TASK] Bumping frontend image version to ${{ env.RELEASE_VERSION }}"
          git push origin HEAD:main --force


      - name: Update server version in Git
        run: |- 
          git config --local user.name "Casey Wylie"
          git config --local user.email cmwylie19@gmail.com
          git add server/env/overlays/stage/version.yaml
          git commit --allow-empty -m '[TASK] Bumping server image version to ${{ env.RELEASE_VERSION }}'
          git push origin HEAD:main --force
          git tag ${{ env.RELEASE_VERSION }} --force
          git push origin HEAD:main --tags --force